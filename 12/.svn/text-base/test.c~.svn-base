/*******************************************
*
* Author: HzChen - hzchen_cs@gwmail.gwu.edu
*
*
* Last modified:	03-01-2014 15:34
*
* Filename:		test.c
*
* Description: 
*	
*
*	The sequence of triangle numbers is generated by adding the natural numbers. 
*	So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
*
*	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*
*	Let us list the factors of the first seven triangle numbers:
*
*	     1: 1
*	     3: 1,3
*		 6: 1,2,3,6
*	     10: 1,2,5,10
*	     15: 1,3,5,15
*	     21: 1,3,7,21
*	     28: 1,2,4,7,14,28
*
*	We can see that 28 is the first triangle number to have over five divisors.
*
*	What is the value of the first triangle number to have over five hundred divisors?
*
*
*
******************************************/
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

int curr_factor=1;

double get_next_tri_num(double *num)
{
	*num+=curr_factor;
	curr_factor++;
	return *num;
}

static int inline
mod(double x, double y)
{
	ulong tmp = x/y;
	return (x - tmp*y);
}

int num_of_factor(double *num)
{
	double tmp=sqrt(*num);
	double i = 1;
	int cnt=1;
	while(i <= tmp)
	{
		if(mod(*num, i)==0)
			cnt ++;

		i++;
	}
	return cnt;
}

int main(int argc, char** argv)
{
	double *result = (double*)malloc(sizeof(double));
	//int i=0;

	*result = 0;
#if 0
	while(1)
	{
		int num = num_of_factor(result);
		get_next_tri_num(result);
//		printf("%f: %d\n", *result, num);
		if(num >= 500)
		{
			printf("the number is %f\n", *result);
			break;
		}
	}
#endif

	*result = 76576500;
	printf("num of divisor of number %f is %d\n", *result , num_of_factor(result));

	return EXIT_SUCCESS;
}

